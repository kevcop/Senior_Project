@model int
<!-- Link to the CSS stylesheet -->
<link href="~/css/StyleSheet.css" rel="stylesheet" type="text/css" />

<div>
    <!-- Header section -->
    <h1>Discussion Messages</h1>
    <!-- Messages will be displayed here -->
    <div id="messages">
    </div>
    <hr />
    <!-- Form for sending a message -->
    <form id="sendMessageForm">
        <!-- Area where the user will type their message -->
        <textarea id="messageContent" rows="4" placeholder="Type your message..." required></textarea>
        <!-- Send message button-->
        <button type="submit">Send</button>
    </form>
</div>

<style>
    /* Chat style */
    #messages {
        display: flex;
        flex-direction: column;
        border: 1px solid #ced4da;
        padding: 15px;
        max-height: 400px;
        overflow-y: auto;
        background-color: #ffffff;
        border-radius: 10px; 
        font-family: Arial, sans-serif;
        font-size: 14px;
        color: #343a40; 
    }
        /* Scrollbar */
        #messages::-webkit-scrollbar {
            width: 8px;
        }

        #messages::-webkit-scrollbar-thumb {
            background-color: #adb5bd; 
            border-radius: 4px;
        }

            #messages::-webkit-scrollbar-thumb:hover {
                background-color: #6c757d; 
            }

    /* Message style */
    .message {
        margin-bottom: 15px;
        padding: 10px;
        border-radius: 10px;
        max-width: 70%; 
        line-height: 1.5;
        font-size: 14px;
    }

    /* Sent message style */
    .sent-message {
        background-color: #007bff; 
        align-self: flex-end;
        color: #ffffff; 
        text-align: right;
    }

    /* Received message style */
    .received-message {
        background-color: #f1f1f1; 
        align-self: flex-start;
        color: #343a40; 
        text-align: left;
    }

    /* Timestamp style */
    .timestamp {
        font-size: 0.85em;
        color: gray;
        text-align: right; 
        margin-top: 5px;
    }

    /* Chat input */
    #sendMessageForm {
        display: flex;
        margin-top: 10px;
        align-items: center;
    }

        #sendMessageForm textarea {
            width: calc(100% - 110px); 
            padding: 10px;
            margin-right: 10px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 14px;
            resize: none; 
        }

            #sendMessageForm textarea:focus {
                outline: none;
                border-color: #495057; 
            }

        /* Send button */
        #sendMessageForm button {
            padding: 10px 20px;
            background-color: #007bff;
            color: #ffffff;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;
        }

            #sendMessageForm button:hover {
                background-color: #0056b3; 
                transform: scale(1.05); 
            }

</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.2/signalr.min.js"></script>

    <script>
        // Get the current user id from the controller 
        const currentUserId = @ViewBag.CurrentUserId;
        // ChatId from the controller
        const chatId = @Model; 

        // Log the current user ID
        console.log(`Current User ID: ${currentUserId}`);

        // Establish SignalR connection
        //Reference: https://learn.microsoft.com/en-us/aspnet/core/signalr/hubs?view=aspnetcore-9.0, 
        // https://learn.microsoft.com/en-us/aspnet/core/signalr/dotnet-client?view=aspnetcore-9.0&tabs=visual-studio, 
        // https://learn.microsoft.com/en-us/aspnet/core/signalr/configuration?view=aspnetcore-9.0&tabs=dotnet
        // https://learn.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-9.0&tabs=visual-studio
        const connection = new signalR.HubConnectionBuilder()
        // Signal R endpoint
            .withUrl("/userMessaging") 
            .build();

        // Start the SignalR connection
        connection.start()
            .then(() => {
                console.log("SignalR connection established.");
                // Join the group chat 
                connection.invoke("JoinGroup", chatId.toString())
                    .then(() => console.log(`Successfully joined group for Chat ID: ${chatId}`))
                    .catch(err => console.error("Error joining group:", err));
            })
            .catch(err => console.error("Error establishing SignalR connection:", err));

/*
loadMessages()

NAME

        loadMessages - Displays messages 

SYNOPSIS

        async function loadMessages();

DESCRIPTION
        Using the chat id, the function will send a GET request to the backend to retrieve the messages
        related to the chat
RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 11:40 PM

*/
/**/
        async function loadMessages() {
            try {
                // Log chat id
                console.log(`Loading messages for Chat ID: ${chatId}`);
                // Send request to fetch messages for the chat id 
                const response = await fetch(`/Messages/GetMessages?chatId=${chatId}`);
                // Area for messages 
                const messagesDiv = document.getElementById("messages");
                //Parse response if successful
                if (response.ok) {
                    // Retrieve the response in JSON format
                    const messages = await response.json();
                    console.log("Fetched messages:", messages);
                    // Clear existing messages
                    messagesDiv.innerHTML = "";
                    // Iterate through each message, providing default values if needed  
                    messages.forEach(message => {
                        const senderName = message.senderName || "Unknown";
                        const messageContent = message.content || "No content provided";
                        // Set the date for the message
                        const formattedDate = new Date(message.timestamp).toLocaleString();
                        // Create a separate section for each message 
                        const messageElement = document.createElement("div");
                        // Add styling 
                        messageElement.classList.add("message");
                        // Display of a message
                        messageElement.innerHTML = `
                                    <p><strong>${senderName}</strong> <span class="timestamp">(${formattedDate})</span>:</p>
                                    <p>${messageContent}</p>
                                    <hr />
                                `;
                        // Add the message to the section 
                        messagesDiv.appendChild(messageElement);
                    });

                    // Scroll to the bottom of the messages
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                    // Handle case where response fails, debug 
                } else {
                    console.error("Failed to fetch messages. Status:", response.statusText);
                    messagesDiv.innerHTML = "<p>No messages found.</p>";
                }
                // Error handle for any other errors
            } catch (error) {
                console.error("Error loading messages:", error);
            }
        }

        /*
sendMessage(event)

NAME

        sendMessage - Send a message to a discussion

SYNOPSIS

        async function sendMessage(Event event);
            event  --> The event being referred to 

DESCRIPTION
        This function allows user to send a message to a group discussion.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 11:49 PM

*/
/**/
        async function sendMessage(event) {
            event.preventDefault();
            // Get message being sent 
            const messageContent = document.getElementById("messageContent").value.trim();
            // Check for an empty message
            if (!messageContent) {
                alert("Message content cannot be empty.");
                return;
            }
            // Details to be sent to the backend
            const data = {
                chatId: chatId, 
                senderId: currentUserId, 
                content: messageContent,
            };
            // Log message request being sent 
            console.log("Attempting to send message with data:", data);

            try {
                // Send a POST request to the backend to send message
                const response = await fetch(`/Messages/Send`, {
                    method: "POST",
                    headers: {
                        // JSON content type
                        "Content-Type": "application/json",
                        // Signal R connection id 
                        "ConnectionId": connection.connectionId 
                    },
                    // Convert to JSON string
                    body: JSON.stringify(data),
                });
                // If message is sent
                if (response.ok) {
                    // Clear message content area for a new message to be sent 
                    document.getElementById("messageContent").value = ""; 
                } else {
                    // Log error if message fails to send
                    const errorMessage = await response.text();
                    console.error("Failed to send message. Backend response:", errorMessage);
                    alert("Failed to send message: " + errorMessage);
                }
                // Handle unexpected errors 
            } catch (error) {
                console.error("Error sending message:", error);
            }
        }

        // Real-time messaging 
        connection.on("ReceiveMessage", (chatId, senderName, content) => {
            // Create a section for the message
            const messagesDiv = document.getElementById("messages");
            const messageElement = document.createElement("div");
            // Add styling
            messageElement.classList.add("message");
            // How message should be displayed
            messageElement.innerHTML = `
                        <p><strong>${senderName}</strong>: ${content}</p>
                        <hr />
                    `;
            // Add message to the caht 
            messagesDiv.appendChild(messageElement);

            // Scroll to the bottom of the messages
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        // Event listeners
        document.addEventListener("DOMContentLoaded", () => {
            // Load existing messages 
            loadMessages();
            // Submit event listener
            document.getElementById("sendMessageForm").addEventListener("submit", sendMessage);
        });
    </script>
}


