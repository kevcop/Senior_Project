@model Senior_Project.Models.Event

@{
    ViewData["Title"] = Model.EventName;
}
<!-- Link to the CSS stylesheet -->
<link href="~/css/StyleSheet.css" rel="stylesheet" type="text/css" />


<div>
    <!-- Header section -->
    <h1>@Model.EventName</h1>
    <!-- Display event details -->
    <p><strong>Date:</strong> @Model.EventDate.ToString("MMMM dd, yyyy")</p>
    <p><strong>Location:</strong> @Model.Location</p>
    <p><strong>Category:</strong> @Model.Category</p>
    <p><strong>Description:</strong> @Model.Description</p>
    <!-- Section to display images -->
    <h2>Images</h2>
    <div style="display: flex; flex-wrap: wrap; gap: 10px;">
        @if (Model.Images != null && Model.Images.Any())
        {
            <!-- Loop through model to display each image -->
            foreach (var image in Model.Images)
            {
                <img src="@Url.Content(image.FilePath)" alt="@Model.EventName" style="max-width: 200px; max-height: 150px;">
            }
        }
        else
        {
            <p>No images available for this event.</p>
        }
    </div>

    <hr />

    <!-- Create Discussion Section -->
    <div>
        <h2>Discussions</h2>
        <form method="post" action="/Events/CreateDiscussion/@Model.EventID">
            <!-- Input field for the discussion title -->
            <div>
                <label for="discussionTitle">Discussion Title</label>
                <input type="text" id="discussionTitle" name="Title" required />
            </div>
            <!-- Button to submit the discussion title and create a discussion -->
            <button type="submit">Create a Discussion</button>
        </form>
    </div>

    <!-- List of Active Discussions -->
    <div id="activeDiscussions">
        <h3>Active Discussions</h3>
        <ul id="discussionList">
        </ul>
    </div>
</div>

@section Scripts {
    <script>
        // Get the event from the controller 
        const eventId = @Model.EventID;

        /*
joinDiscussion(chatId)

NAME

        joinDiscussion - Allows a user to join a discussion 

SYNOPSIS

        void joinDiscussion(int chatId);
            chatId  --> The id of the chat 

DESCRIPTION
        This function sends a POST request to the backend so that the user can join a specific
        group using a chat id. The user is redireced to the discussion page.
RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 11:27 Pm

*/
/**/
        async function joinDiscussion(chatId) {
            // Log chat id to the network console for debugging purposes
            console.log(`Attempting to join discussion with ChatID: ${chatId}`);

            try {
                // Send request to the backend to join the group 
                const response = await fetch(`/Messages/JoinGroup?chatId=${chatId}`, {
                    method: "POST",
                });
                // Handle case where there is a failure 
                if (!response.ok) {
                    // Get error and display it 
                    const errorMessage = await response.text();
                    console.error("Error joining discussion:", errorMessage);
                    alert("Error joining discussion: " + errorMessage);
                } else {
                    console.log(`Successfully joined discussion with ChatID: ${chatId}`);

                    // Redirect the user to the View Discussion page
                    window.location.href = `/Events/Discussions/View/${chatId}`;
                }
                // Error handling
            } catch (error) {
                console.error("Error joining discussion:", error);
                alert("Failed to join discussion. Please try again later.");
            }
        }
/*
loadDiscussions()

NAME

        loadDiscussions - Displays the list of discussions 

SYNOPSIS

        async function loadDiscussions();

DESCRIPTION
        A GET request is used to fetch the list of discussions related to an 
RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 11:32 PM

*/
/**/
        async function loadDiscussions() {
            try {
                // Send request to fetch discussions 
                const response = await fetch(`/Events/Discussions/List/${eventId}`);
                // Display list of discussions 
                const discussionList = document.getElementById("discussionList");
                // If successful 
                if (response.ok) 
                {
                    //Parse response 
                    const discussions = await response.json();
                    console.log("Discussions fetched:", discussions);
                    // Clear existing discussions 
                    discussionList.innerHTML = "";
                    // Iterate through list of discussions and create HTML structure for each 
                    discussions.forEach(discussion => {
                        const listItem = document.createElement("li");
                        listItem.innerHTML = `
                            <a href="javascript:void(0);" onclick="joinDiscussion(${discussion.chatID})">
                                ${discussion.chatName} (Created: ${new Date(discussion.createdDate).toLocaleDateString()})
                            </a>`;
                        discussionList.appendChild(listItem);
                    });

                } else {
                    // Log error for backend access
                    console.error("Error fetching discussions:", response.statusText);
                }
                // Error handling for any other unexpected errors
            } catch (error) {
                console.error("Error loading discussions:", error);
            }
        }

        // Load discussions on page load
        document.addEventListener("DOMContentLoaded", loadDiscussions);
    </script>

}
