@model Senior_Project.Models.Event

@{
    ViewData["Title"] = Model.EventName;
}
<link href="~/css/StyleSheet.css" rel="stylesheet" type="text/css" />


<div>
    <h1>@Model.EventName</h1>
    <p><strong>Date:</strong> @Model.EventDate.ToString("MMMM dd, yyyy")</p>
    <p><strong>Location:</strong> @Model.Location</p>
    <p><strong>Category:</strong> @Model.Category</p>
    <p><strong>Description:</strong> @Model.Description</p>

    <h2>Images</h2>
    <div style="display: flex; flex-wrap: wrap; gap: 10px;">
        @if (Model.Images != null && Model.Images.Any())
        {
            foreach (var image in Model.Images)
            {
                <img src="@Url.Content(image.FilePath)" alt="@Model.EventName" style="max-width: 200px; max-height: 150px;">
            }
        }
        else
        {
            <p>No images available for this event.</p>
        }
    </div>

    <hr />

    <!-- Create Discussion Section -->
    <div>
        <h2>Discussions</h2>
        <form method="post" action="/Events/CreateDiscussion/@Model.EventID">
            <div>
                <label for="discussionTitle">Discussion Title</label>
                <input type="text" id="discussionTitle" name="Title" required />
            </div>
            <button type="submit">Create a Discussion</button>
        </form>
    </div>

    <!-- List of Active Discussions -->
    <div id="activeDiscussions">
        <h3>Active Discussions</h3>
        <ul id="discussionList">
            <!-- Discussions will be loaded dynamically -->
        </ul>
    </div>
</div>

@section Scripts {
    <script>
        const eventId = @Model.EventID;


        async function joinDiscussion(chatId) {
            console.log(`Attempting to join discussion with ChatID: ${chatId}`);

            try {
                const response = await fetch(`/Messages/JoinGroup?chatId=${chatId}`, {
                    method: "POST",
                });

                if (!response.ok) {
                    const errorMessage = await response.text();
                    console.error("Error joining discussion:", errorMessage);
                    alert("Error joining discussion: " + errorMessage);
                } else {
                    console.log(`Successfully joined discussion with ChatID: ${chatId}`);

                    // Redirect the user to the View Discussion page
                    window.location.href = `/Events/Discussions/View/${chatId}`;
                }
            } catch (error) {
                console.error("Error joining discussion:", error);
                alert("Failed to join discussion. Please try again later.");
            }
        }


        // Load discussions for this event
        // Load discussions for this event
        async function loadDiscussions() {
            try {
                const response = await fetch(`/Events/Discussions/List/${eventId}`);
                const discussionList = document.getElementById("discussionList");

                if (response.ok) {
                    const discussions = await response.json();
                    console.log("Discussions fetched:", discussions);

                    discussionList.innerHTML = "";

                    discussions.forEach(discussion => {
                        const listItem = document.createElement("li");
                        listItem.innerHTML = `
                            <a href="javascript:void(0);" onclick="joinDiscussion(${discussion.chatID})">
                                ${discussion.chatName} (Created: ${new Date(discussion.createdDate).toLocaleDateString()})
                            </a>`;
                        discussionList.appendChild(listItem);
                    });

                } else {
                    console.error("Error fetching discussions:", response.statusText);
                    discussionList.innerHTML = "<li>No active discussions found for this event.</li>";
                }
            } catch (error) {
                console.error("Error loading discussions:", error);
                document.getElementById("discussionList").innerHTML = "<li>Error loading discussions. Please try again later.</li>";
            }
        }




        // Load discussions on page load
        document.addEventListener("DOMContentLoaded", loadDiscussions);
    </script>

}
