@{
    // Tab title
    ViewData["Title"] = "Landing";
}

<head>
        <!-- Link to the external CSS stylesheet -->
    <link href="~/css/StyleSheet.css" rel="stylesheet" type="text/css" />
</head>

<div style="position: relative;">
    <!-- Link to the profile page -->
    <a href="/profile" style="position: absolute; left: 10px; top: 0;">Profile</a>

    <!-- Search bar and button for users and events -->
    <div style="position: absolute; right: 10px; top: 0;">
        <input id="searchQuery" type="text" placeholder="Search for users or events...">
        <button type="button" onclick="search()">Search</button>
    </div>
</div>

<!-- Section for popular upcoming events -->
<section id="popular-events" style="text-align: center; margin-top: 40px;">
    <h2>Popular Upcoming Events</h2>
    <!-- Carousel style display for popular events -->
    <div class="carousel-section" style="display: inline-block;">
        <!-- Previous slide button -->
        <a class="prev" onclick="prevSlide()">&#10094;</a>
        <!-- Div for event slides -->
        <div class="event-slides" id="popular-events-section"></div>
        <!-- Next slide button -->
        <a class="next" onclick="nextSlide()">&#10095;</a>
    </div>
</section>


<!-- Handle displaying search results -->
<div id="searchResults" style="margin-top: 20px; display: none;">
    <h2>Search Results</h2>

    <!-- User Results -->
    <div id="userResults" style="margin-bottom: 20px; display: none;">
        <h3>Users</h3>
        <!-- List to display user search results -->
        <ul id="userResultsList"></ul>
    </div>

    <!-- Event Results -->
    <div id="eventResults" style="display: none;">
        <h3>Events</h3>
        <!-- List to display event search results -->
        <ul id="eventResultsList"></ul>
    </div>
</div>

<!-- Page Header -->

<!-- Section for popular upcoming events -->


<!-- Section for local events -->
<section id="local-events">
    <h2 class="text-center">Local Events Near You</h2>

    <div class="zip-input">
        <!-- Input for zip code-->
        <input type="text" id="zip-code" placeholder="Enter Zip Code">
        <!-- Button for searching by zip code -->
        <button onclick="delayFetch(fetchLocalEvents)">Search by Zip Code</button>
        <!-- Button for sharing location -->
        <button onclick="delayFetch(fetchEventsByLocation)">Use My Location</button>
    </div>

    <!-- Carousel style of display for local events -->
    <div class="carousel-section">
        <a class="prev" onclick="prevSlideLocal()">&#10094;</a>
        <!-- Section for local event slides -->
        <div class="event-slides-local" id="local-events-section"></div>
        <!-- Next slide button -->
        <a class="next" onclick="nextSlideLocal()">&#10095;</a>
    </div>
</section>

<!-- Section to create a new event -->
<section id="create-event" class="text-center">
    <h2 style="margin-bottom: 10px;">Host Your Own Event</h2>
    <!-- Button to take user to event creation page -->
    <button type="button" class="button" style="margin-top: 0;" onclick="window.location.href='/EventCreation/Create'">Create an Event</button>
</section>


<script>
    // Track index for popular event slides
    let currentIndex = 0;
    // Track index for local event slides
    let localCurrentIndex = 0;
    // Ticket master API key
    const apiKey = '8QsGHUSyehy7U8hMEzRWSyNNvMHsqdbX'; 
    // Variable to configure popular events
    const popularEventsSection = document.getElementById('popular-events-section');
    // Variable to configure local events
    const localEventsSection = document.getElementById('local-events-section');
    // Track debounce, helps delay a function
    let lastTimeout = null
    // Retrieve passed in User ID from controller
    const userId = @ViewBag.UserId;
    
    /**/
    /*
    delayFetch(fetchFn)

    NAME

            delayFetch -

    SYNOPSIS

            void delayFetch(Function fetchFn);
                fetchFn  --> The function to be called after some time 

    DESCRIPTION

            This function attempts to slow down the execution of a function that is passed to it. This is done to avoid rate limiting the API calls.
            The execution of the function is slowed by 300 milliseconds. If a call to the function is made before the delay reaches 300 milliseconds, the timeout is cleared
            and the delay resets.

    RETURNS

            None.

    AUTHOR

            Kevin Chicas

    DATE

            12/07/2024 10:12pm

    */
    /**/

    function delayFetch(fetchFn) {
        if (lastTimeout) clearTimeout(lastTimeout);
        // Wait 300ms before running the function
        lastTimeout = setTimeout(fetchFn, 300); 
    }

    /**/
    /*
    clearEventSection(section)

    NAME

            clearEventSection - Removes all child elements from a specified section.

    SYNOPSIS

            void clearEventSection(HTMLElement section);
                section  --> The DOM element whose contents will be cleared.

    DESCRIPTION

            This function takes a single DOM element as input and removes all
            of its child elements. It is typically used to reset the content
            of a section before dynamically loading new elements, ensuring
            that outdated or duplicate data is not displayed.

    RETURNS

            None.

    AUTHOR

            Kevin Chicas

    DATE

            12/07/2024 10:19

    */
    /**/
    function clearEventSection(section) {
        section.innerHTML = '';
    }

    /**/
    /*
    resetSlideIndex()

    NAME

            resetSlideIndex - Resets the slide index

    SYNOPSIS

            void resetSlideIndex();

    DESCRIPTION
            This function ensures the carousel feature will always begin with the first slide whenever new data is loaded in. This is done 
            because popular events and local events are dynamically updated. The user will always see the first event of the slides
    RETURNS

            None.

    AUTHOR
        Kevin Chicas
    DATE
        12/07/2024 10:29 PM
    REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
    */
    /**/
    function resetSlideIndex() {
        currentIndex = 0;
        localCurrentIndex = 0;
    }

    /**/
    /*
    fetchPopularEvents()

    NAME

            fetchPopularEvents - Retrieves popular events from Ticketmaster API

    SYNOPSIS

            async function fetchPopularEvents();

    DESCRIPTION
            Using API keywords, this function will look to retrieve events from Ticketmaster. 
            It will retrieve events for the sports, concerts, and theater type events. The events will
            also be saved to the database upon fetching and will work with the frontend to update the
            carousel display of events
    RETURNS
            None

    AUTHOR

            Kevin Chicas

    DATE

            12/08/2024 11:13 AM

    */
    /**/

async function fetchPopularEvents() {
    // Attempt to retrieve data
    try {
        // Retrieve sporting events from Ticketmaster
        const sports_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?countryCode=US&apikey=${apiKey}`);
        const sports_data = await sports_response.json();

        // Verify data retrieved, all event related info is stored in the embedded section
        if (sports_data._embedded && sports_data._embedded.events.length > 0) {
            // Iterate through results
            for (const event of sports_data._embedded.events) {
                // Save the event to the database
                await saveEventToDatabase(event);
                // Add event to event slides
                updateSingleEvent(event, popularEventsSection);
            }
        }
        // Retrieve concert events from Ticketmaster
        const concerts_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?keyword=Concert&apikey=${apiKey}`);
        const concerts_data = await concerts_response.json();
        // Verify data retrieved, all event related info is stored in the embedded section
        if (concerts_data._embedded && concerts_data._embedded.events.length > 0) {
            // Iterate through results
            for (const event of concerts_data._embedded.events) {
                // Save event to the database
                await saveEventToDatabase(event);
                // Add event to slides
                updateSingleEvent(event, popularEventsSection);
            }
        }
        // Retrieve theater events from Ticketmaster
        const theater_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?keyword=Theater&countryCode=US&apikey=${apiKey}`);
        const theater_data = await theater_response.json();
        // Verify data retrieved, all event related info is stored in the embedded section
        if (theater_data._embedded && theater_data._embedded.events.length > 0) {
            // Iterate through results 
            for (const event of theater_data._embedded.events) {
                // Save event to the database
                await saveEventToDatabase(event);
                // Add event to the slides
                updateSingleEvent(event, popularEventsSection);
            }
        }
    // Log error if one occurs 
    } catch (error) {
        console.error('Error fetching popular events:', error);
    }
}

    /**/
    /*
    saveEventToDatabase(event)

    NAME

            saveEventToDatabase - Saves an event to the database

    SYNOPSIS

            async function saveEventToDatabase(Object event);
                event  --> The object retrieved from API response

    DESCRIPTION
            This function aims to send an event object to the /Event/SaveEvent backend endpoint to attempt
            to save the event to the database. The function sends the relevant event details to the endpoint for 
            storage. 
    RETURNS

            None.

    AUTHOR

            Kevin Chicas

    DATE

            11:45am 12/08/2024

    */
    /**/
async function saveEventToDatabase(event) {
    try {
        // Information to be sent to the endpoint
        const data = {
            // Ticketmaster id for event
            eventId: event.id, 
            // Event name, if none is provided use "unnamed event"
            eventName: event.name || 'Unnamed Event',
            // Event description
            description: event.info || '',
            // Event date
            eventDate: event.dates.start.localDate || new Date().toISOString(),
            // Event location
            location: event._embedded?.venues?.[0]?.name || 'Unknown Location',
            // Event category
            category: event.classifications?.[0]?.segment?.name || 'General',
            // Event related image attributes
            images: event.images?.map(img => ({
                url: img.url,
                width: img.width,
                height: img.height
            })),
            // Type of event
            isPublic: true
        };
        // POST Request to endpoint for saving an event using JSON format
        const response = await fetch('/Event/SaveEvent', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        // Handle response status CHECK THIS
        if (response.ok) {
            console.log(`Event ${event.id} saved successfully.`);
        } else if (response.status === 409) {
            console.log(`Event ${event.id} already exists.`);
        } else {
            console.error(`Failed to save event ${event.id}: ${response.statusText}`);
        }
    } catch (error) {
        console.error(`Error saving event ${event.id}:`, error);
    }
}


    /**/
    /*
    fetchLocalEvents()

    NAME

            fetchLocalEvents - Get local events based on a user inputted zip code

    SYNOPSIS

            async function fetchLocalEvents();

    DESCRIPTION
            This function uses a zip code to fetch the events that are near a user. It searches
            for events of categories : theater, sport, and concert; using the ticketmaster API.
            Makes a call to another function to get the state assosciated with the zip code since the ticketmaster
            API does not function as expected when supplying a zip code (Inconsistent results). Will use the state instead of zip code
            when fetching from the API. 
    RETURNS

            None.

    AUTHOR

            Kevin Chicas

    DATE

            12/08/2024 12:02 PM

    */
    /**/
    async function fetchLocalEvents() {
        // Clear slides each time to not overload
        clearEventSection(localEventsSection); 
        // Ensures slides start from beginning event
        resetSlideIndex(); 
        // Extract zip code 
        const zipCode = document.getElementById('zip-code').value; // Get the entered zip code
        // Handle case where no input is provided yet button is clicked 
        if (!zipCode) {
            alert('Please enter a zip code!');
            return;
        }
        // Convert zip to a state
        const state = await getStateFromZip(zipCode);
        // Validate state
        if (state) {
            try {
                // Fetch sporting related events
                const sports_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&stateCode=${state}&keyword=Sports`);
                // Convert response to JSON 
                const sports_data = await sports_response.json();
                // If valid results
                if (sports_data._embedded && sports_data._embedded.events.length > 0) {
                    // Add event to slides
                    updateSingleEvent(sports_data._embedded.events[0], localEventsSection);
                }
                // Fetch concert related events
                const concert_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&stateCode=${state}&keyword=Concert`);
                // Convert response to JSON 
                const concert_data = await concert_response.json();
                // If valid results
                if (concert_data._embedded && concert_data._embedded.events.length > 0) {
                    // Add event to local slides
                    updateSingleEvent(concert_data._embedded.events[0], localEventsSection);
                }
                // Fetch theater events
                const theater_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&stateCode=${state}&keyword=Theater`);
                // Convert response to JSON 
                const theater_data = await theater_response.json();
                // Validate results
                if (theater_data._embedded && theater_data._embedded.events.length > 0) {
                    // Add event to the local slides
                    updateSingleEvent(theater_data._embedded.events[0], localEventsSection);
                }
            // Log error
            } catch (error) {
                console.error('Error fetching local events:', error);
            }
            // Handle case where invalid zip is given
        } else {
            console.error('Could not determine state from zip code.');
        }
    }

    /**/
    /*
    getStateFromZip(zipCode)

    NAME

            getStateFromZip - Gets state in 2 letter format(e.g NJ, NY) using zip code 

    SYNOPSIS

            async function getStateFromZip(string zipCode);
                zipCode  --> The zip code provided by the user.

    DESCRIPTION
            Using Zippopotam.Us API, this function is able to retrieve a state abbreviation
            using the zip code provided by the user.
    RETURNS
            The state abbreviation in string format.

    AUTHOR
            Kevin Chicas
    DATE
            12/08/2024 12:20 PM

    */
    /**/

    async function getStateFromZip(zipCode) {
        try {
            // Make a request to the Zippopotam.us API using the zipcode provided
            const response = await fetch(`https://api.zippopotam.us/us/${zipCode}`);
            // Validate response 
            if (response.ok) {
                // Convert response to json format
                const data = await response.json();
                // Extract abbreviated state
                const state = data.places[0]['state abbreviation'];
                // Return result
                return state;
            } else {
                // Handle case where zip code is invalid
                alert('Invalid zip code. Please enter a valid zip code.');
            }
            // Error handling 
        } catch (error) {
            console.error('Error fetching state from zip code:', error);
            alert('Error fetching state from zip code.');
        }
        return null;
    }

    /**/
    /*
    fetchEventsByLocation()

    NAME

            fetchEventsByLocation - Uses a users geolocation to fetch local events, an alternative to providing a zip code

    SYNOPSIS

            void fetchEventsByLocation();

    DESCRIPTION
            If a user is willing to share their location, this function will find their exact location
            by using longitude and latitude. The function then uses the longitude and latitude in the API call 
            to fetch events assosciated. Searches for events related to sports, concerts, and theater. Will add each event
            to the local events slide. 
    RETURNS

            None.

    AUTHOR

            Kevin Chicas

    DATE

            12/08/2024 12:37pm
REFERENCE:
    https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API
    */
    /**/
    function fetchEventsByLocation() {
        // Clears local event slides
        clearEventSection(localEventsSection); 
        // Ensures slides are set to the initial event 
        resetSlideIndex();
        // Checking browser support of geolocation
        if (navigator.geolocation) {
            // Request user location
            navigator.geolocation.getCurrentPosition(async function (position) {
                // Get latitude
                const lat = position.coords.latitude;
                // Get longitude
                const lon = position.coords.longitude;


                try {
                    // Fetch sporting event
                    const sports_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&latlong=${lat},${lon}&keyword=Sports`);
                    // Convert response to JSON 
                    const sports_data = await sports_response.json();
                    // Validate response
                    if (sports_data._embedded && sports_data._embedded.events.length > 0) {
                        // Update local slides
                        updateSingleEvent(sports_data._embedded.events[0], localEventsSection);
                    }
                    // Fetch concert event
                    const concert_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&latlong=${lat},${lon}&keyword=Concert`);
                    // Convert response to JSON
                    const concert_data = await concert_response.json();
                    // Validate response
                    if (concert_data._embedded && concert_data._embedded.events.length > 0) {
                        // Add event to slides
                        updateSingleEvent(concert_data._embedded.events[0], localEventsSection);
                    }
                    // Fetch theater event
                    const theater_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&latlong=${lat},${lon}&keyword=Theater`);
                    // Convert response to JSON
                    const theater_data = await theater_response.json();
                    // Validate response
                    if (theater_data._embedded && theater_data._embedded.events.length > 0) {
                        // Add event to local slides
                        updateSingleEvent(theater_data._embedded.events[0], localEventsSection);
                    }
                 // Error handling 
                } catch (error) {
                    console.error('Error fetching events by geolocation:', error);
                }
            // Handle case where geolocation related errors or if user does not want to share location
            }, function (error) {
                alert('Geolocation not supported or permission denied. Please enter a zip code instead.');
            });
            // Handle case where browser does not support geolocation
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

    /**/
    /*
    updateSingleEvent(event, section)

    NAME

            updateSingleEvent - Display events for popular or local slides

    SYNOPSIS

            void updateSingleEvent(Object event, HTMLElement section);
                event     --> The event object 
                section --> Where to display

    DESCRIPTION
            This function generates the HTML needed to contain a single event and will append it
            to the slideshow. It will hold the image, details, and ticketmaster link for an event. 
    RETURNS

            None.

    AUTHOR

            Kevin Chicas

    DATE

           12/08/2024 12:49 PM
REFERENCE
    https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement
    */
    /**/
    // Function to dynamically generate a single event slide and inject it into the HTML
    function updateSingleEvent(event, section) {
        // If invalid event object, function returns and does nothing 
        if (!event) return;
        // Create a new div 
        const eventItem = document.createElement('div');
        // Add class for styling
        eventItem.classList.add('event-item');
        // HTML structure for the event, accounts for image and event details  
        eventItem.innerHTML = `
                            <img src="${event.images[0].url}" alt="${event.name}">
                            <div class="event-info">
                                <h3>${event.name}</h3>
                                <p>Date: ${new Date(event.dates.start.localDate).toLocaleDateString()} | Location: ${event._embedded.venues[0].name}</p>
                                <a href="${event.url}" target="_blank" class="button">Learn More</a>
                            </div>
                        `;
        // Add event to the slideshow
        section.appendChild(eventItem);
        // Show first slide
        showSlidesLocal(0, section); 
    }
    /**/
/*
showSlides(n, section)

NAME

        showSlides - Display a slide in carousel layout

SYNOPSIS

        void showSlides(int n, HTMLElement section);
            n         --> Index of slides
            section --> Where to display

DESCRIPTION
        Handles displaying a slide based on the current index which is increased or decreased
        depending on user selection. If user reaches the end of slides, it will reset to the beginning slide.
        Shows only one slide at a time.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 1:08PM
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/
/**/

    function showSlides(n, section) {
        // Get all slides for a section
        let slides = section.getElementsByClassName("event-item");
        // Case where there are no slides 
        if (slides.length === 0) return; 
        // Get total number of slides
        let totalSlides = slides.length;
        // Hide all slides 
        for (let i = 0; i < totalSlides; i++) {
            slides[i].style.display = "none";
        }
        // Adjust index to loop back if index exceeds slide count
        if (n >= totalSlides) {
            currentIndex = 0;
        }
        // Display slide 
        slides[currentIndex].style.display = "block";
    }
    /**/
/*
showSlidesLocal(n, section)

NAME

        showSlidesLocal - Displays a slide for local events section

SYNOPSIS

        void showSlidesLocal(int n, HTMLElement section);
            n         --> Index of slides 
            section --> Where to display

DESCRIPTION
        Handles displaying a slide based on the current index which is increased or decreased
        depending on user selection. If user reaches the end of slides, it will reset to the beginning slide.
        Shows only one slide at a time.
RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 1:30 pm 
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/
/**/

    function showSlidesLocal(n, section) {
        // Get all slides for the section
        let slides = section.getElementsByClassName("event-item");
        // Handle case where there are no slides
        if (slides.length === 0) return; 
        // Get the total number of slides 
        let totalSlides = slides.length;
        // Hide all slides
        for (let i = 0; i < totalSlides; i++) {
            slides[i].style.display = "none";
        }
        // Adjust index to loop back if index exceeds slide count
        if (n >= totalSlides) {
            localCurrentIndex = 0;
        }

        // Show slides 
        slides[localCurrentIndex].style.display = "block";
    }
    /**/
/*
nextSlide()

NAME

        nextSlide - Take users to following slide 

SYNOPSIS

        void nextSlide();

DESCRIPTION
        Increments the currentIndex global variable which is used to track 
        the current slide. Will increment to show the following slide. Calls the showslides
        function with the updated index and popular events section.
RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 1:37 pm
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/

    function nextSlide() {
        // Increment global variable used to track current slide
        currentIndex++;
        // Display slide
        showSlides(currentIndex, popularEventsSection);
    }
/**/
/*
prevSlide()

NAME

        prevSlide - Move to the previous slide 

SYNOPSIS

        void prevSlide();

DESCRIPTION
        Decrements the currentIndex global variable which is used to track 
        the current slide. Will decrement to show the previous slide. Calls the showslides
        function with the updated index and popular events section.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 1:43 pm
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/
/**/

    function prevSlide() {
        // Decrement global variable used to track current slide 
        currentIndex--;
        // Display slide
        showSlides(currentIndex, popularEventsSection);
    }

/**/
/*
nextSlideLocal()

NAME

        nextSlideLocal - Moves to the next slide in the local events slides 

SYNOPSIS

        void nextSlideLocal();

DESCRIPTION
        Increments the localCurrentIndex global variable which is used to track 
        the current slide. Will increment to show the following slide. Calls the showslides
        function with the updated index and local events section.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 1:45 pm
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/
/**/
    function nextSlideLocal() {
        // Increment global variable used to track local slides index
        localCurrentIndex++;
        // Display slide 
        showSlidesLocal(localCurrentIndex, localEventsSection);
    }
    /**/
/*
prevSlideLocal()

NAME

        prevSlideLocal - Moves to the previous slide for local events slide 

SYNOPSIS

        void prevSlideLocal();

DESCRIPTION
        Decrements the localCurrentIndex global variable which is used to track 
        the current slide. Will decrement to show the previous slide. Calls the showslides
        function with the updated index and local events section.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 1:49 PM
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/
/**/

    function prevSlideLocal() {
        // Decrement global variable used to track local slides index 
        localCurrentIndex--;
        // Display slide
        showSlidesLocal(localCurrentIndex, localEventsSection);
    }

    // When landing page is loaded, perform the fetching of popular events
    window.onload = function () {
        fetchPopularEvents();
    }

        /**/
    /*
    search()

    NAME

            search - Searches for users or events 

    SYNOPSIS

            async function search();

    DESCRIPTION
            This function uses the users search query to match to other usernames and event names. It validates 
            the query to ensure it is not empty. Sends a GET request to the search endpoint with the query. The backend
            will respond with potential matches in the respective databases. 
    RETURNS

            None.

    AUTHOR

            Kevin Chicas

    DATE

            12/08/2024 1:55 PM

    */

     // User search functionality
async function search() {
    // Get the search query
    const query = document.getElementById("searchQuery").value.trim();
    // Handle case where query is empty and search is attempted
    if (!query) {
        alert("Please enter a search term.");
        return;
    }

    try {
        // Send GET request to search endpoint with the query
        const response = await fetch(`/Landing/SearchUsers?query=${encodeURIComponent(query)}`);
        // Transform results from bacakend into JSON
        const data = await response.json();
        //Debug statement for viewing response
        console.log("API Response:", data); 

        // Clear previous results
        const userResults = document.getElementById("userResults");
        const userResultsList = document.getElementById("userResultsList");
        const eventResults = document.getElementById("eventResults");
        const eventResultsList = document.getElementById("eventResultsList");
        userResults.style.display = "none";
        userResultsList.innerHTML = "";
        eventResults.style.display = "none";
        eventResultsList.innerHTML = "";

        // Handle case where the no matches are found from search 
        if (data.message) {
            alert(data.message);
            return;
        }

        // Display user results 
        if (data.users && data.users.length > 0) {
            // Make results visibile 
            userResults.style.display = "block";
            data.users.forEach(user => {
                // Create list to hold each result 
                const listItem = document.createElement("li");
                // HTML for displaying results 
                listItem.innerHTML = `
                    <strong>${user.username}</strong> - ${user.firstName} ${user.lastName}
                    <a href="${user.profileLink}" class="button">View Profile</a>
                `;
                // Add user to list 
                userResultsList.appendChild(listItem);
            });
        }

        // Display event results 
        if (data.events && data.events.length > 0) {
            // Make results visible 
            eventResults.style.display = "block";
            data.events.forEach(event => {
                // Create list to hold each result 
                const listItem = document.createElement("li");

                // HTML structure image
                let imagesHtml = "";
                if (event.images && event.images.length > 0) {
                    imagesHtml = event.images
                        .map(
                            img => `<img src="${img.filePath}" alt="Event Image" style="max-width: 100px; max-height: 100px; margin-right: 10px;">`
                        )
                        .join("");
                }
                // HTML for displaying the results along with event details 
                listItem.innerHTML = `
                    <div style="display: flex; align-items: center;">
                        ${imagesHtml}
                        <div>
                            <strong>${event.eventName}</strong> - ${event.location}
                            <p>Date: ${event.eventDate}</p>
                            <a href="${event.detailsLink}" class="button">View Details</a>
                        </div>
                    </div>
                `;
                // Add event to the list 
                eventResultsList.appendChild(listItem);
            });
        }

        // Show search results 
        document.getElementById("searchResults").style.display = "block";
    // Error handling
    } catch (error) {
        console.error("Error fetching search results:", error);
        alert("An error occurred while searching. Please try again later.");
    }
}
</script>
