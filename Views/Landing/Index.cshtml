@{
    ViewData["Title"] = "Landing";
}

<head>
    <link href="~/css/StyleSheet.css" rel="stylesheet" type="text/css" />
</head>
<div>
    <a class href="/profile">Profile</a>
         
    <div style="float: right;">
    <input id="searchQuery" type="text" placeholder="Search for users or events...">
    <button type="button" onclick="search()">Search</button>
</div>

</div>
<div id="searchResults" style="margin-top: 20px; display: none;">
    <h2>Search Results</h2>

    <!-- User Results -->
    <div id="userResults" style="margin-bottom: 20px; display: none;">
        <h3>Users</h3>
        <ul id="userResultsList"></ul>
    </div>

    <!-- Event Results -->
    <div id="eventResults" style="display: none;">
        <h3>Events</h3>
        <ul id="eventResultsList"></ul>
    </div>
</div>
<h1 class="text-center">Landing page</h1                                          
<section id="popular-events">
    <h2 class="text-center">Popular Upcoming Events</h2>

    <div class="carousel-container">
        <a class="prev" onclick="prevSlide()">&#10094;</a>

        <div class="event-slides" id="popular-events-container"></div>

        <a class="next" onclick="nextSlide()">&#10095;</a>
    </div>
</section>

<section id="local-events">
    <h2 class="text-center">Local Events Near You</h2>

    <div class="zip-input">
        <input type="text" id="zip-code" placeholder="Enter Zip Code">
        <button onclick="debouncedFetch(fetchLocalEvents)">Search by Zip Code</button>
        <button onclick="debouncedFetch(fetchEventsByLocation)">Use My Location</button>
    </div>

    <div class="carousel-container">
        <a class="prev" onclick="prevSlideLocal()">&#10094;</a>

        <div class="event-slides-local" id="local-events-container"></div>

        <a class="next" onclick="nextSlideLocal()">&#10095;</a>
    </div>
</section>

<section id="create-event" class="text-center">
    <h2 style="margin-bottom: 10px;">Host Your Own Event</h2>
    <button type="button" class="button" style="margin-top: 0;" onclick="window.location.href='/EventCreation/Create'">Create an Event</button>
</section>




<script>
    let currentIndex = 0;
    let localCurrentIndex = 0;
    const apiKey = '8QsGHUSyehy7U8hMEzRWSyNNvMHsqdbX'; // Replace with your actual API key
    const popularEventsContainer = document.getElementById('popular-events-container');
    const localEventsContainer = document.getElementById('local-events-container');
    let lastTimeout = null;  // For debouncing
        const userId = @ViewBag.UserId;

     

    // Log the User ID to the console
    console.log(`User ID: ${userId}`);

    // Helper: Debounce the fetch events
    function debouncedFetch(fetchFn) {
        if (lastTimeout) clearTimeout(lastTimeout);
        lastTimeout = setTimeout(fetchFn, 300); // Wait 300ms before running the function
    }

    // Helper: Clear event container before loading new events
    function clearEventContainer(container) {
        container.innerHTML = '';
    }

    // Reset slide index after clearing or switching event source
    function resetSlideIndex() {
        currentIndex = 0;
        localCurrentIndex = 0;
    }

    // Fetch popular events from Ticketmaster API (one sporting event, one concert, one theater event)
async function fetchPopularEvents() {
    try {
        const sports_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?countryCode=US&apikey=${apiKey}`);
        const sports_data = await sports_response.json();

        if (sports_data._embedded && sports_data._embedded.events.length > 0) {
            for (const event of sports_data._embedded.events) {
                // Save the event to the database
                await saveEventToDatabase(event);
                updateSingleEvent(event, popularEventsContainer);
            }
        }

        const concerts_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?keyword=Concert&apikey=${apiKey}`);
        const concerts_data = await concerts_response.json();

        if (concerts_data._embedded && concerts_data._embedded.events.length > 0) {
            for (const event of concerts_data._embedded.events) {
                await saveEventToDatabase(event);
                updateSingleEvent(event, popularEventsContainer);
            }
        }

        const theater_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?keyword=Theater&countryCode=US&apikey=${apiKey}`);
        const theater_data = await theater_response.json();

        if (theater_data._embedded && theater_data._embedded.events.length > 0) {
            for (const event of theater_data._embedded.events) {
                await saveEventToDatabase(event);
                updateSingleEvent(event, popularEventsContainer);
            }
        }

    } catch (error) {
        console.error('Error fetching popular events:', error);
    }
}

// Save the event to your database via an API endpoint
async function saveEventToDatabase(event) {
    try {
        const payload = {
            eventId: event.id, // External ID from Ticketmaster
            eventName: event.name || 'Unnamed Event',
            description: event.info || '',
            eventDate: event.dates.start.localDate || new Date().toISOString(),
            location: event._embedded?.venues?.[0]?.name || 'Unknown Location',
            category: event.classifications?.[0]?.segment?.name || 'General',
            images: event.images?.map(img => ({
                url: img.url,
                width: img.width,
                height: img.height
            })),
            isPublic: true
        };

        const response = await fetch('/Event/SaveEvent', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (response.ok) {
            console.log(`Event ${event.id} saved successfully.`);
        } else if (response.status === 409) {
            console.log(`Event ${event.id} already exists.`);
        } else {
            console.error(`Failed to save event ${event.id}: ${response.statusText}`);
        }
    } catch (error) {
        console.error(`Error saving event ${event.id}:`, error);
    }
}




    // Fetch local events based on the zip code (one sporting event, one concert, one theater event)
    async function fetchLocalEvents() {
        clearEventContainer(localEventsContainer); // Clear the local events container before loading new events
        resetSlideIndex(); // Reset the slide index to avoid out-of-bounds access

        const zipCode = document.getElementById('zip-code').value; // Get the entered zip code
        if (!zipCode) {
            alert('Please enter a zip code!');
            return;
        }

        const state = await getStateFromZip(zipCode);
        if (state) {
            try {
                const sports_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&stateCode=${state}&keyword=Sports`);
                const sports_data = await sports_response.json();
                if (sports_data._embedded && sports_data._embedded.events.length > 0) {
                    updateSingleEvent(sports_data._embedded.events[0], localEventsContainer);
                }

                const concert_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&stateCode=${state}&keyword=Concert`);
                const concert_data = await concert_response.json();
                if (concert_data._embedded && concert_data._embedded.events.length > 0) {
                    updateSingleEvent(concert_data._embedded.events[0], localEventsContainer);
                }

                const theater_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&stateCode=${state}&keyword=Theater`);
                const theater_data = await theater_response.json();
                if (theater_data._embedded && theater_data._embedded.events.length > 0) {
                    updateSingleEvent(theater_data._embedded.events[0], localEventsContainer);
                }
            } catch (error) {
                console.error('Error fetching local events:', error);
            }
        } else {
            console.error('Could not determine state from zip code.');
        }
    }

    // Fetch events based on geolocation (one sporting event, one concert, one theater event)
    function fetchEventsByLocation() {
        clearEventContainer(localEventsContainer); // Clear the local events container before loading new events
        resetSlideIndex(); // Reset the slide index to avoid out-of-bounds access

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(async function (position) {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;

                console.log(`Latitude: ${lat}, Longitude: ${lon}`);

                try {
                    const sports_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&latlong=${lat},${lon}&keyword=Sports`);
                    const sports_data = await sports_response.json();
                    if (sports_data._embedded && sports_data._embedded.events.length > 0) {
                        updateSingleEvent(sports_data._embedded.events[0], localEventsContainer);
                    }

                    const concert_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&latlong=${lat},${lon}&keyword=Concert`);
                    const concert_data = await concert_response.json();
                    if (concert_data._embedded && concert_data._embedded.events.length > 0) {
                        updateSingleEvent(concert_data._embedded.events[0], localEventsContainer);
                    }

                    const theater_response = await fetch(`https://app.ticketmaster.com/discovery/v2/events.json?apikey=${apiKey}&latlong=${lat},${lon}&keyword=Theater`);
                    const theater_data = await theater_response.json();
                    if (theater_data._embedded && theater_data._embedded.events.length > 0) {
                        updateSingleEvent(theater_data._embedded.events[0], localEventsContainer);
                    }
                } catch (error) {
                    console.error('Error fetching events by geolocation:', error);
                }
            }, function (error) {
                alert('Geolocation not supported or permission denied. Please enter a zip code instead.');
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

    // Fetch the state using the zip code with Zippopotam.us API
    async function getStateFromZip(zipCode) {
        try {
            const response = await fetch(`https://api.zippopotam.us/us/${zipCode}`);
            if (response.ok) {
                const data = await response.json();
                const state = data.places[0]['state abbreviation'];
                console.log(`State for zip code ${zipCode}: ${state}`);
                return state;
            } else {
                alert('Invalid zip code. Please enter a valid zip code.');
                console.error('Invalid zip code or error fetching location data');
            }
        } catch (error) {
            console.error('Error fetching state from zip code:', error);
            alert('Error fetching state from zip code.');
        }
        return null;
    }

    // Function to dynamically generate a single event slide and inject it into the HTML
    function updateSingleEvent(event, container) {
        if (!event) return;

        const eventItem = document.createElement('div');
        eventItem.classList.add('event-item');

        eventItem.innerHTML = `
                            <img src="${event.images[0].url}" alt="${event.name}">
                            <div class="event-info">
                                <h3>${event.name}</h3>
                                <p>Date: ${new Date(event.dates.start.localDate).toLocaleDateString()} | Location: ${event._embedded.venues[0].name}</p>
                                <a href="${event.url}" target="_blank" class="button">Learn More</a>
                            </div>
                        `;
        container.appendChild(eventItem);

        showSlidesLocal(0, container); // Show the first slide only if slides exist
    }

    function showSlides(n, container) {
        let slides = container.getElementsByClassName("event-item");
        if (slides.length === 0) return; // No slides to show

        let totalSlides = slides.length;
        for (let i = 0; i < totalSlides; i++) {
            slides[i].style.display = "none";
        }

        if (n >= totalSlides) {
            currentIndex = 0;
        }
        if (n < 0) {
            currentIndex = totalSlides - 1;
        }

        slides[currentIndex].style.display = "block";
    }

    function showSlidesLocal(n, container) {
        let slides = container.getElementsByClassName("event-item");
        if (slides.length === 0) return; // No slides to show

        let totalSlides = slides.length;
        for (let i = 0; i < totalSlides; i++) {
            slides[i].style.display = "none";
        }

        if (n >= totalSlides) {
            localCurrentIndex = 0;
        }
        if (n < 0) {
            localCurrentIndex = totalSlides - 1;
        }

        slides[localCurrentIndex].style.display = "block";
    }

    function nextSlide() {
        currentIndex++;
        showSlides(currentIndex, popularEventsContainer);
    }

    function prevSlide() {
        currentIndex--;
        showSlides(currentIndex, popularEventsContainer);
    }

    function nextSlideLocal() {
        localCurrentIndex++;
        showSlidesLocal(localCurrentIndex, localEventsContainer);
    }

    function prevSlideLocal() {
        localCurrentIndex--;
        showSlidesLocal(localCurrentIndex, localEventsContainer);
    }

    function testing(){
        console.log("Hello");
    }

    // Fetch events on page load
    window.onload = function () {
        fetchPopularEvents();
    }

     // User search functionality
async function search() {
    const query = document.getElementById("searchQuery").value.trim();
    if (!query) {
        alert("Please enter a search term.");
        return;
    }

    try {
        const response = await fetch(`/Landing/SearchUsers?query=${encodeURIComponent(query)}`);
        const data = await response.json();

        console.log("API Response:", data); // Log API response

        // Clear previous results
        const userResults = document.getElementById("userResults");
        const userResultsList = document.getElementById("userResultsList");
        const eventResults = document.getElementById("eventResults");
        const eventResultsList = document.getElementById("eventResultsList");
        userResults.style.display = "none";
        userResultsList.innerHTML = "";
        eventResults.style.display = "none";
        eventResultsList.innerHTML = "";

        // Handle message (e.g., no results found)
        if (data.message) {
            alert(data.message);
            return;
        }

        // Display user results if any
        if (data.users && data.users.length > 0) {
            userResults.style.display = "block";
            data.users.forEach(user => {
                const listItem = document.createElement("li");
                listItem.innerHTML = `
                    <strong>${user.username}</strong> - ${user.firstName} ${user.lastName}
                    <a href="${user.profileLink}" class="button">View Profile</a>
                `;
                userResultsList.appendChild(listItem);
            });
        }

        // Display event results if any
        if (data.events && data.events.length > 0) {
            eventResults.style.display = "block";
            data.events.forEach(event => {
                const listItem = document.createElement("li");

                // Generate image display HTML
                let imagesHtml = "";
                if (event.images && event.images.length > 0) {
                    imagesHtml = event.images
                        .map(
                            img => `<img src="${img.filePath}" alt="Event Image" style="max-width: 100px; max-height: 100px; margin-right: 10px;">`
                        )
                        .join("");
                }

                listItem.innerHTML = `
                    <div style="display: flex; align-items: center;">
                        ${imagesHtml}
                        <div>
                            <strong>${event.eventName}</strong> - ${event.location}
                            <p>Date: ${event.eventDate}</p>
                            <a href="${event.detailsLink}" class="button">View Details</a>
                        </div>
                    </div>
                `;
                eventResultsList.appendChild(listItem);
            });
        }

        // Show search results container
        document.getElementById("searchResults").style.display = "block";

    } catch (error) {
        console.error("Error fetching search results:", error);
        alert("An error occurred while searching. Please try again later.");
    }
}



</script>
