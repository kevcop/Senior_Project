@{
    ViewData["Title"] = "Chat";
}

<head>
    <link href="~/css/styles.css" rel="stylesheet" type="text/css" />
</head>

<div class="chat-container">
    <h1>Chat with @ViewBag.Receiver.username</h1>

    <!-- Chat messages -->
    <div id="chatMessages" class="chat-messages">
        @if (ViewBag.Messages != null && ViewBag.Messages.Count > 0)
        {
            foreach (var message in ViewBag.Messages)
            {
                <div class="chat-message @(message.SenderID == ViewBag.SenderId ? "sent" : "received")">
                    <p>@message.Content</p>
                    <span>@message.Timestamp.ToLocalTime().ToString("g")</span>
                </div>
            }
        }
        else
        {
            <p>No messages yet. Start the conversation!</p>
        }
    </div>

    <!-- Message input -->
    <form id="chatForm" onsubmit="sendMessage(event)">
        <input type="hidden" id="receiverId" value="@ViewBag.Receiver.Id" />
        <textarea id="chatInput" placeholder="Type your message here..." required></textarea>
        <button type="submit">Send</button>
    </form>
</div>

<style>
    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .chat-messages {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
    }

    .chat-message {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
    }

        .chat-message.sent {
            background-color: #d1e7dd;
            text-align: right;
        }

        .chat-message.received {
            background-color: #f8d7da;
            text-align: left;
        }

    #chatForm {
        display: flex;
        gap: 10px;
    }

    #chatInput {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    #chatForm button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        #chatForm button:hover {
            background-color: #0056b3;
        }
</style>

<script>
    function sendMessage(event) {
        event.preventDefault();
        const receiverId = document.getElementById("receiverId").value;
        const content = document.getElementById("chatInput").value;

        fetch('/Messages/Send', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                senderId: @ViewBag.SenderId,
                receiverId: receiverId,
                content: content,
            }),
        })
            .then(response => {
                if (response.ok) {
                    // Reload messages
                    fetchMessages(receiverId);
                    document.getElementById("chatInput").value = ""; // Clear input
                } else {
                    alert("Failed to send the message.");
                }
            });
    }

    function fetchMessages(receiverId) {
        fetch(`/Messages/GetConversation?userId=@ViewBag.SenderId&otherUserId=${receiverId}`)
            .then(response => response.json())
            .then(messages => {
                const chatMessages = document.getElementById("chatMessages");
                chatMessages.innerHTML = ""; // Clear old messages
                messages.forEach(msg => {
                    const messageElement = document.createElement("div");
                    messageElement.className = msg.senderID === @ViewBag.SenderId ? "chat-message sent" : "chat-message received";
                    messageElement.innerHTML = `
                            <p>${msg.content}</p>
                            <span>${new Date(msg.timestamp).toLocaleString()}</span>
                        `;
                    chatMessages.appendChild(messageElement);
                });
            });
    }
</script>
@{
    ViewData["Title"] = "Chat";
}

<head>
    <link href="~/css/styles.css" rel="stylesheet" type="text/css" />
</head>

<div class="chat-container">
    <h1>Chat with @ViewBag.Receiver.username</h1>

    <!-- Chat messages -->
    <div id="chatMessages" class="chat-messages">
        @if (ViewBag.Messages != null && ViewBag.Messages.Count > 0)
        {
            foreach (var message in ViewBag.Messages)
            {
                <div class="chat-message @(message.SenderID == ViewBag.SenderId ? "sent" : "received")">
                    <p>@message.Content</p>
                    <span>@message.Timestamp.ToLocalTime().ToString("g")</span>
                </div>
            }
        }
        else
        {
            <p>No messages yet. Start the conversation!</p>
        }
    </div>

    <!-- Message input -->
    <form id="chatForm" onsubmit="sendMessage(event)">
        <input type="hidden" id="receiverId" value="@ViewBag.Receiver.Id" />
        <textarea id="chatInput" placeholder="Type your message here..." required></textarea>
        <button type="submit">Send</button>
    </form>
</div>

<style>
    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .chat-messages {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
    }

    .chat-message {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
    }

        .chat-message.sent {
            background-color: #d1e7dd;
            text-align: right;
        }

        .chat-message.received {
            background-color: #f8d7da;
            text-align: left;
        }

    #chatForm {
        display: flex;
        gap: 10px;
    }

    #chatInput {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    #chatForm button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        #chatForm button:hover {
            background-color: #0056b3;
        }
</style>

<script>
    function sendMessage(event) {
        event.preventDefault();
        const receiverId = document.getElementById("receiverId").value;
        const content = document.getElementById("chatInput").value;

        fetch('/Messages/Send', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                senderId: @ViewBag.SenderId,
                receiverId: receiverId,
                content: content,
            }),
        })
            .then(response => {
                if (response.ok) {
                    // Reload messages
                    fetchMessages(receiverId);
                    document.getElementById("chatInput").value = ""; // Clear input
                } else {
                    alert("Failed to send the message.");
                }
            });
    }

    function fetchMessages(receiverId) {
        fetch(`/Messages/GetConversation?userId=@ViewBag.SenderId&otherUserId=${receiverId}`)
            .then(response => response.json())
            .then(messages => {
                const chatMessages = document.getElementById("chatMessages");
                chatMessages.innerHTML = ""; // Clear old messages
                messages.forEach(msg => {
                    const messageElement = document.createElement("div");
                    messageElement.className = msg.senderID === @ViewBag.SenderId ? "chat-message sent" : "chat-message received";
                    messageElement.innerHTML = `
                            <p>${msg.content}</p>
                            <span>${new Date(msg.timestamp).toLocaleString()}</span>
                        `;
                    chatMessages.appendChild(messageElement);
                });
            });
    }
</script>
