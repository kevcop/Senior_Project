@model Senior_Project.Models.Profile

@{
    ViewData["Title"] = $"{Model.User.username}'s Profile";
}

<head>
    <link href="~/css/styles.css" rel="stylesheet" type="text/css" />
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>

</head>

<div class="profile-container">
    <h1 class="text-center">@Model.User.username's Profile</h1>

    <!-- Chat Button -->
    <div class="chat-button-container">
        <button class="chat-button" onclick="openChatModal(@Model.User.Id, '@Model.User.username')">Chat</button>
    </div>

    <!-- User Bio -->
    <section class="profile-section">
        <h2>Bio</h2>
        <p>@Model.Bio</p>
    </section>

    <!-- User Interests -->
    <section class="profile-section">
        <h2>Interests</h2>
        <p>@Model.Interests</p>
    </section>

    <!-- Attending Events -->
    <section class="profile-section">
        <h2>Attending Events</h2>
        @if (ViewBag.AttendingEventImages != null && ViewBag.AttendingEventImages.Count > 0)
        {
            <div class="event-images">
                @foreach (var image in ViewBag.AttendingEventImages)
                {
                    <img src="@image.FilePath" alt="Event Image" class="event-image" />
                }
            </div>
        }
        else
        {
            <p>No events currently being attended.</p>
        }
    </section>

    <!-- Past Events -->
    <section class="profile-section">
        <h2>Past Events</h2>
        @if (ViewBag.PastEventImages != null && ViewBag.PastEventImages.Count > 0)
        {
            <div class="event-images">
                @foreach (var image in ViewBag.PastEventImages)
                {
                    <img src="@image.FilePath" alt="Event Image" class="event-image" />
                }
            </div>
        }
        else
        {
            <p>No past events found.</p>
        }
    </section>
</div>

<!-- Chat Modal -->
<!-- Chat Modal -->
<div id="chatModal" class="chat-modal">
    <div class="chat-modal-content">
        <span class="close" onclick="closeChatModal()">&times;</span>
        <h2>Chat with <span id="chatReceiverName"></span></h2>
        <input type="hidden" id="chatId">
        <input type="hidden" id="receiverId"> <!-- Ensure this input is present -->
        <div id="chatMessages" class="chat-messages">
            <!-- Messages will be dynamically loaded here -->
        </div>
        <form id="chatForm" onsubmit="sendMessage(event)">
            <textarea id="chatInput" placeholder="Type your message here..." required></textarea>
            <button type="submit">Send</button>
        </form>
    </div>
</div>



<style>
    /* Modal Styles */
    .chat-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .chat-modal-content {
        background-color: #f9f9f9;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        width: 50%;
        position: relative;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .chat-messages {
        max-height: 300px;
        overflow-y: scroll;
        margin-bottom: 20px;
        border: 1px solid #ddd;
        padding: 10px;
        background: #fff;
    }

    #chatInput {
        width: calc(100% - 100px);
        padding: 10px;
        margin-right: 10px;
    }

    #chatForm button {
        padding: 10px 20px;
    }
</style>

<script>

    const currentUserId = @ViewBag.CurrentUserId; // Ensure this is set in your controller
    const currentUserUsername = '@ViewBag.CurrentUserUsername';

    // Initialize SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/userMessaging")
        .build();

    // Event handler for receiving real-time messages
    connection.on("ReceiveMessage", (chatId, senderName, content) => {
        console.log(`New message received: ChatID=${chatId}, Sender=${senderName}, Content=${content}`);

        // Display the new message in the chat window
        const chatMessages = document.getElementById('chatMessages');
        const messageElement = document.createElement('div');
        messageElement.className = senderName === currentUserUsername ? 'sent-message' : 'received-message';
        messageElement.innerText = `${senderName}: ${content}`;
        chatMessages.appendChild(messageElement);

        // Automatically scroll to the latest message
        chatMessages.scrollTop = chatMessages.scrollHeight;
    });

    // Start the connection
    connection.start()
        .then(() => console.log("SignalR connected successfully!"))
        .catch(err => console.error("Error connecting to SignalR:", err));





    // Open the chat modal
    function openChatModal(receiverId, receiverName) {
        console.log(`Attempting to open chat with Receiver ID: ${receiverId}, Receiver Name: ${receiverName}`);

        try {
            console.log("Validating currentUserId...");
            if (typeof currentUserId === 'undefined' || currentUserId === null || currentUserId === '') {
                console.error("currentUserId is not defined or invalid. Ensure the user is logged in and currentUserId is set.");
                alert("Failed to open chat. Current user ID is not set. Please log in or refresh the page.");
                return;
            }
            console.log(`Current User ID validated: ${currentUserId}`);

            console.log("Calling GetOrCreateChat API...");
            fetch(`/Messages/GetOrCreateChat?userId1=${currentUserId}&userId2=${receiverId}`)
                .then(response => {
                    console.log(`GetOrCreateChat API response status: ${response.status}`);
                    if (!response.ok) {
                        console.error(`GetOrCreateChat API returned an error: ${response.statusText}`);
                        throw new Error(`Failed to fetch or create chat: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(chat => {
                    console.log("Processing chat object returned from API...");
                    if (!chat || !chat.chatID) {
                        console.error("Chat object returned from API is invalid or missing chatID.");
                        alert("Failed to create or fetch chat. Please try again.");
                        return;
                    }
                    console.log(`Chat fetched/created successfully: Chat ID=${chat.chatID}`);

                    // Set the receiver's name in the modal
                    const chatReceiverNameElement = document.getElementById('chatReceiverName');
                    if (!chatReceiverNameElement) {
                        console.error("Receiver name element is missing in the modal.");
                        return;
                    }
                    chatReceiverNameElement.innerText = receiverName;

                    // Set the Chat ID in the hidden input field
                    const chatIdField = document.getElementById('chatId');
                    if (!chatIdField) {
                        console.error("Chat ID input field is missing in the modal.");
                        return;
                    }
                    chatIdField.value = chat.chatID;

                    // Ensure the receiver ID field exists and set it
                    const receiverIdField = document.getElementById('receiverId');
                    if (!receiverIdField) {
                        console.error("Receiver ID input field is missing in the modal.");
                        return;
                    }
                    receiverIdField.value = receiverId;

                    // Show the chat modal
                    const chatModal = document.getElementById('chatModal');
                    if (!chatModal) {
                        console.error("Chat modal element is missing.");
                        return;
                    }
                    chatModal.style.display = 'block';

                    console.log("Chat modal attributes set and opened successfully.");
                    console.log(`Chat modal attributes: Chat ID=${chat.chatID}, Receiver Name=${receiverName}`);

                    // Load conversation
                    console.log("Fetching messages for the chat...");
                    fetchMessages(chat.chatID);
                    console.log("Here is the chatid");
                    console.log(chat.chatID);

                    // **Override ChatID for Hardcoded Test**
                    const testChatId = chat.chatID.toString(); // Hardcoded testChatId
                    console.log(`Overriding ChatID with hardcoded value: ${testChatId}`);

                    // **Check connection state before starting**
                    if (connection.state === "Disconnected") {
                        console.log("SignalR connection is in 'Disconnected' state. Starting connection...");
                        connection.start()
                            .then(() => {
                                console.log("SignalR connection established. Joining SignalR group...");
                                return connection.invoke("JoinGroup", testChatId); // Use hardcoded ChatID
                            })
                            .then(() => console.log(`Successfully joined SignalR group for ChatID=${testChatId}`))
                            .catch(err => console.error("Error joining SignalR group:", err));
                    } else {
                        console.log("SignalR connection is already active. Joining SignalR group...");
                        connection.invoke("JoinGroup", testChatId) // Use hardcoded ChatID
                            .then(() => console.log(`Successfully joined SignalR group for ChatID=${testChatId}`))
                            .catch(err => console.error("Error joining SignalR group:", err));
                    }
                })
                .catch(error => {
                    console.error("Error fetching or creating chat:", error);
                    alert("Failed to open chat. Please try again.");
                });
        } catch (error) {
            console.error("Error opening chat modal:", error);
        }
    }









    // Close the chat modal
    function closeChatModal() {
        console.log("Closing chat modal...");
        try {
            document.getElementById('chatModal').style.display = 'none';
            document.getElementById('chatMessages').innerHTML = '';
            console.log("Chat modal closed.");
        } catch (error) {
            console.error("Error closing chat modal:", error);
        }
    }

    // Fetch messages
    // Fetch messages
    // Fetch messages
    function fetchMessages(chatId) {
        console.log(`Fetching messages for Chat ID: ${chatId}`);

        fetch(`/Messages/GetMessages?chatId=${chatId}`)
            .then(response => {
                console.log("Fetch response received:", response);
                if (!response.ok) {
                    throw new Error(`Failed to fetch messages: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                // Debugging output
                console.log("Messages retrieved:", data);

                // Check if messages is an array
                const messages = Array.isArray(data) ? data : data.messages;

                if (!Array.isArray(messages)) {
                    console.error("Invalid messages format:", messages);
                    alert("Failed to load messages. Please try again.");
                    return;
                }

                const chatMessages = document.getElementById('chatMessages');
                chatMessages.innerHTML = ''; // Clear old messages

                messages.forEach(msg => {
                    const messageElement = document.createElement('div');

                    // Extract sender name from the message
                    const senderName = msg.senderName || "Unknown"; // Use "Unknown" if senderName is undefined
                    const messageContent = msg.content || ""; // Use an empty string if content is missing

                    // Add appropriate styling for sent or received messages
                    messageElement.className = msg.senderID === currentUserId ? 'sent-message' : 'received-message';
                    messageElement.innerText = `${senderName}: ${messageContent}`;

                    chatMessages.appendChild(messageElement);
                });

                console.log("Messages displayed in the chat modal.");
            })
            .catch(error => {
                console.error("Error fetching messages:", error);
                alert("Failed to load messages. Please try again.");
            });
    }





    // Send message
    function sendMessage(event) {
        event.preventDefault();

        const chatId = document.getElementById('chatId').value;
        const content = document.getElementById('chatInput').value.trim();

        if (!content) {
            alert("Message content cannot be empty.");
            return;
        }

        const payload = {
            chatId: parseInt(chatId), // Use only ChatId and Content
            content: content,
        };

        console.log("Payload being sent to the server:", payload);

        fetch('/Messages/Send', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'ConnectionId': connection.connectionId, // Pass SignalR's ConnectionId in the headers
            },
            body: JSON.stringify(payload),
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(errorMessage => {
                        throw new Error(errorMessage);
                    });
                }
                return response.json();
            })
            .then(() => {
                console.log("Message sent successfully.");
                document.getElementById('chatInput').value = ''; // Clear input field
            })
            .catch(error => {
                console.error("Error sending message:", error);
                alert("Failed to send message. Please try again.");
            });
    }



</script>


