@model Senior_Project.Models.Profile

@{
    ViewData["Title"] = $"{Model.User.username}'s Profile";
}

<link href="~/css/StyleSheet.css" rel="stylesheet" type="text/css" />


<head>
    <link href="~/css/styles.css" rel="stylesheet" type="text/css" />
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>

</head>

<div class="profile-section">
    <h1 class="text-center">@Model.User.username's Profile</h1>

    <!-- Chat Button -->
    <div class="chat-button-section">
        <button class="chat-button" onclick="openChatModal(@Model.User.Id, '@Model.User.username')">Chat</button>
    </div>

    <!-- User Bio -->
    <section class="profile-section">
        <h2>Bio</h2>
        <p>@Model.Bio</p>
    </section>

    <!-- User Interests -->
    <section class="profile-section">
        <h2>Interests</h2>
        <p>@Model.Interests</p>
    </section>

    <!-- Attending Events -->
    <section class="profile-section">
        <h2>Attending Events</h2>
        @if (ViewBag.AttendingEvents != null && ViewBag.AttendingEvents.Count > 0)
        {
            <div class="carousel-section">
                <a class="prev" onclick="prevSlideAttending()">&#10094;</a>
                <div class="event-slides" id="attending-events-section">
                    @foreach (var eventInfo in ViewBag.AttendingEvents)
                    {
                        <div class="event-item">
                            <a href="https://localhost:7064/Events/Details/@eventInfo.Event.EventID" target="_blank">
                                <img src="@eventInfo.FilePath" alt="Event Image" class="event-image" />
                            </a>
                            <div class="event-details">
                                <h3>@eventInfo.Event.EventName</h3>
                                <p><strong>Location:</strong> @eventInfo.Event.Location</p>
                                <p><strong>Date:</strong> @eventInfo.Event.EventDate.ToString("MMMM dd, yyyy")</p>
                            </div>
                        </div>
                    }
                </div>
                <a class="next" onclick="nextSlideAttending()">&#10095;</a>
            </div>
        }
        else
        {
            <p>No events currently being attended.</p>
        }
    </section>

    <!-- Past Events -->
    <section class="profile-section">
        <h2>Past Events</h2>
        @if (ViewBag.PastEvents != null && ViewBag.PastEvents.Count > 0)
        {
            <div class="carousel-section">
                <a class="prev" onclick="prevSlidePast()">&#10094;</a>
                <div class="event-slides" id="past-events-section">
                    @foreach (var eventInfo in ViewBag.PastEvents)
                    {
                        <div class="event-item">
                            <a href="https://localhost:7064/Events/Details/@eventInfo.Event.EventID" target="_blank">
                                <img src="@eventInfo.FilePath" alt="Event Image" class="event-image" />
                            </a>
                            <div class="event-details">
                                <h3>@eventInfo.Event.EventName</h3>
                                <p><strong>Location:</strong> @eventInfo.Event.Location</p>
                                <p><strong>Date:</strong> @eventInfo.Event.EventDate.ToString("MMMM dd, yyyy")</p>
                            </div>
                        </div>
                    }
                </div>
                <a class="next" onclick="nextSlidePast()">&#10095;</a>
            </div>
        }
        else
        {
            <p>No past events found.</p>
        }
    </section>
</div>

<!-- Chat Modal -->
<div id="chatModal" class="chat-modal">
    <div class="chat-modal-content">
        <span class="close" onclick="closeChatModal()">&times;</span>
        <h2>Chat with <span id="chatReceiverName"></span></h2>
        <input type="hidden" id="chatId">
        <input type="hidden" id="receiverId"> <!-- Ensure this input is present -->
        <div id="chatMessages" class="chat-messages">
            <!-- Messages will be loaded here -->
        </div>
        <form id="messageForm" onsubmit="sendMessage(event)">
            <textarea id="chatInput" placeholder="Type your message here..." required></textarea>
            <button type="submit">Send</button>
        </form>
    </div>
</div>



<style>
    /* Modal style */
    .chat-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }
    /* Modal content style */
    .chat-modal-content {
        background-color: #f8f9fa; 
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #ced4da;
        border-radius: 10px;
        width: 50%;
        position: relative;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }
    /* Header style for modal content */
        .chat-modal-content h2 {
            font-size: 20px;
            font-weight: bold;
            color: #343a40; 
            text-align: center;
            margin-bottom: 20px;
            margin-top: 0;
        }

    /* Close button styles */
    .close {
        color: #6c757d; 
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        transition: color 0.3s;
    }

        .close:hover {
            color: #000; 
        }
    /* Message Styles */
    .chat-messages {
        max-height: 300px;
        overflow-y: auto;
        margin-bottom: 20px;
        border: 1px solid #ced4da;
        padding: 10px;
        background: #ffffff; 
        border-radius: 5px;
        font-family: Arial, sans-serif;
        font-size: 14px;
        color: #343a40; 
    }
        /* Scroll bar styles */
        .chat-messages::-webkit-scrollbar {
            width: 8px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background-color: #adb5bd; /* Grey scrollbar */
            border-radius: 4px;
        }

            .chat-messages::-webkit-scrollbar-thumb:hover {
                background-color: #6c757d;
            }
/* Chat input style */
    #chatInput {
        width: calc(100% - 110px);
        padding: 10px;
        margin-right: 10px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        font-size: 14px;
    }

        #chatInput:focus {
            outline: none;
            border-color: #495057; 
        }
    /* Button Styles for chat form */
    #messageForm button {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.2s;
    }

        #messageForm button:hover {
            background-color: #0056b3;
            transform: scale(1.05);
        }
</style>


<script>
    // Retrieving passed in user id 
    const currentUserId = @ViewBag.CurrentUserId; 
    // Retrieving passed in username
    const currentUserUsername = '@ViewBag.CurrentUserUsername';

    // Initialize SignalR connection
    //Reference: https://learn.microsoft.com/en-us/aspnet/core/signalr/hubs?view=aspnetcore-9.0,
    // https://learn.microsoft.com/en-us/aspnet/core/signalr/dotnet-client?view=aspnetcore-9.0&tabs=visual-studio,
    // https://learn.microsoft.com/en-us/aspnet/core/signalr/configuration?view=aspnetcore-9.0&tabs=dotnet
    // https://learn.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-9.0&tabs=visual-studio
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/userMessaging")
        .build();

    // Event handler for receiving real-time messages
    connection.on("ReceiveMessage", (chatId, senderName, content) => {
        console.log(`New message received: ChatID=${chatId}, Sender=${senderName}, Content=${content}`);

        // Display the new message in the chat window
        const chatMessages = document.getElementById('chatMessages');
        const messageElement = document.createElement('div');
        messageElement.className = senderName === currentUserUsername ? 'sent-message' : 'received-message';
        messageElement.innerText = `${senderName}: ${content}`;
        chatMessages.appendChild(messageElement);

        // Automatically scroll to the latest message
        chatMessages.scrollTop = chatMessages.scrollHeight;
    });

    // Start the connection
    connection.start()
        .then(() => console.log("SignalR connected successfully!"))
        .catch(err => console.error("Error connecting to SignalR:", err));





   /*
openChatModal(receiverId, receiverName)

NAME

        openChatModal - Opens the chat pop up for chatting with another user/ 

SYNOPSIS

        void openChatModal(int receiverId, string receiverName);

            receiverId   --> The ID of the user to chat with.
            receiverName --> The name of the user to chat with.

DESCRIPTION

        This function handles the process of opening a pop up window for chatting 
        with another user. It validates the current user's ID and fetches or creates
        a chat object from the backend. The function also a SignalR connection for 
        real-time communication.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/10/2024 10:15 PM
    REFERENCE
         https://www.w3schools.com/howto/howto_css_modals.asp
         https://stackoverflow.com/questions/40645032/creating-multiple-modals-on-a-single-page
         https://stackoverflow.com/questions/77604055/modals-using-html-and-javascript
*/
    function openChatModal(receiverId, receiverName) {
        // Log the user's id and name 
        console.log(`Attempting to open chat with Receiver ID: ${receiverId}, Receiver Name: ${receiverName}`);

        try {
            // Checking for a valid current user id 
            if (typeof currentUserId === 'undefined' || currentUserId === null || currentUserId === '') {
                console.error("currentUserId is not defined or invalid. Ensure the user is logged in and currentUserId is set.");
                return;
            }
            // Get a chat if it already exists or create one between the users
            fetch(`/Messages/GetOrCreateChat?userId1=${currentUserId}&userId2=${receiverId}`)
                .then(response => {
                    console.log(`GetOrCreateChat response status: ${response.status}`);
                    // Error handling when backend fails 
                    if (!response.ok) {
                        console.error(`GetOrCreateChat API returned an error: ${response.statusText}`);
                        throw new Error(`Failed to fetch or create chat: ${response.statusText}`);
                    }
                    // Backend response in JSON format 
                    return response.json();
                })
                .then(chat => {
                    // Validate chat object from backend 
                    if (!chat || !chat.chatID) {
                        console.error("Chat object returned from API is invalid or missing chatID.");
                        return;
                    }

                    // Add the chat id and receiver name to the window 
                    const chatReceiverNameElement = document.getElementById('chatReceiverName');
                    // Handle when receiver name is not populated 
                    if (!chatReceiverNameElement) {
                        console.error("Receiver name element is missing in the modal.");
                        return;
                    }
                    // Set the receiver name
                    chatReceiverNameElement.innerText = receiverName;

                    // Set the Chat ID in the hidden input field
                    const chatIdField = document.getElementById('chatId');
                    if (!chatIdField) {
                        console.error("Chat ID input field is missing in the modal.");
                        return;
                    }
                    chatIdField.value = chat.chatID;

                    // Ensure the receiver ID field exists and set it
                    const receiverIdField = document.getElementById('receiverId');
                    if (!receiverIdField) {
                        console.error("Receiver ID input field is missing in the modal.");
                        return;
                    }
                    receiverIdField.value = receiverId;

                    // Display the chat window 
                    const chatModal = document.getElementById('chatModal');
                    if (!chatModal) {
                        console.error("Chat modal element is missing.");
                        return;
                    }
                    chatModal.style.display = 'block';

                    console.log(`Chat modal attributes: Chat ID=${chat.chatID}, Receiver Name=${receiverName}`);

                    // Load conversation
                    fetchMessages(chat.chatID);
 
                    // Chat id 
                    const testChatId = chat.chatID.toString(); 

                    // SignalR connection 
                    if (connection.state === "Disconnected") {
                        console.log("SignalR connection is in 'Disconnected' state. Starting connection...");
                        // Start the connection when connection is disconnected
                        connection.start()
                            .then(() => {
                                console.log("SignalR connection established");
                                // Join group 
                                return connection.invoke("JoinGroup", testChatId); 
                            })
                            .then(() => console.log(`Successfully joined SignalR group for ChatID=${testChatId}`))
                            .catch(err => console.error("Error joining SignalR group:", err));
                    } else {
                        // If connection is already started 
                        console.log("SignalR connection is already active. Joining SignalR group...");
                        // Join the chat 
                        connection.invoke("JoinGroup", testChatId) 
                            .then(() => console.log(`Successfully joined SignalR group for ChatID=${testChatId}`))
                            .catch(err => console.error("Error joining SignalR group:", err));
                    }
                })
                // Handle errors during chat creation
                .catch(error => {
                    console.error("Error fetching or creating chat:", error);
                });
                // Handle all other issues 
        } catch (error) {
            console.error( rror);
        }
    }


    /*
closeChatModal()

NAME

        closeChatModal - Closes the chat window 

SYNOPSIS

        void closeChatModal();

DESCRIPTION

        This function hides the chat window and clears the contents for future use.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/10/2024 10:28 PM
REFERENCE
        https://www.w3schools.com/howto/howto_css_modals.asp
        https://stackoverflow.com/questions/40645032/creating-multiple-modals-on-a-single-page
        https://stackoverflow.com/questions/77604055/modals-using-html-and-javascript
*/
    function closeChatModal() {
        console.log("Closing chat modal...");
        try {
            // Hide the chat window 
            document.getElementById('chatModal').style.display = 'none';
            // Delete the content 
            document.getElementById('chatMessages').innerHTML = '';
            // Error handling when window is not closed 
        } catch (error) {
            console.error("Error closing chat modal:", error);
        }
    }

    /*
fetchMessages(chatId)

NAME

        fetchMessages - Retrieves and displays messages for a specific chat.

SYNOPSIS

        void fetchMessages(int chatId);

            chatId --> The id of chat to retrieve messages from 

DESCRIPTION

        This function sends a GET request to the backend to retrieve and display messages 
        for a specific based on the provided chat id . 

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/10/2024 10:31 PM

*/

    function fetchMessages(chatId) {
        // Log the chat id 
        console.log(`Fetching messages for Chat ID: ${chatId}`);
        // Make a GET request to the backend to retrieve the messages 
        fetch(`/Messages/GetMessages?chatId=${chatId}`)
            .then(response => {
                console.log("Response received:", response);
                // Error handling when backend fails 
                if (!response.ok) {
                    throw new Error(`Failed to fetch messages: ${response.statusText}`);
                }
                // Return the chats as a JSON 
                return response.json();
            })
            .then(data => {
                // Verify messages 
                console.log("Messages retrieved:", data);

                // Checking for array 
                const messages = Array.isArray(data) ? data : data.messages;
                // Error handling when messages are not in array 
                if (!Array.isArray(messages)) {
                    console.error("Invalid messages format:", messages);
                    return;
                }
                // Section to display messages
                const chatMessages = document.getElementById('chatMessages');
                // Clear previous messages 
                chatMessages.innerHTML = ''; 
                // Iterate through the messages 
                messages.forEach(msg => {
                    // Create a div for each message 
                    const messageElement = document.createElement('div');

                    // Extract sender name from the message
                    const senderName = msg.senderName || "Unknown"; 
                    // Extract message
                    const messageContent = msg.content || ""; 

                    // Add styling
                    messageElement.className = msg.senderID === currentUserId ? 'sent-message' : 'received-message';
                    messageElement.innerText = `${senderName}: ${messageContent}`;
                    // Add the message to the chat 
                    chatMessages.appendChild(messageElement);
                });

            })
            // Error handling for when fetching messages fails 
            .catch(error => {
                console.error("Error fetching messages:", error);
                alert("Failed to load messages. Please try again.");
            });
    }





    /*
sendMessage(event)

NAME

        sendMessage - Sends a message to the chat

SYNOPSIS

        void sendMessage(Event event);

            event --> Event object when message is sent 
DESCRIPTION

        This function handles sending a message from the user to the backend server.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/10/2024 10:40 PM

*/
    function sendMessage(event) {
        event.preventDefault();
        // Get chat id
        const chatId = document.getElementById('chatId').value;
        // Get message content 
        const content = document.getElementById('chatInput').value.trim();
        // Handle case where message input is empty 
        if (!content) {
            alert("Message content cannot be empty.");
            return;
        }
        // Data to send to the backend 
        const data = {
            chatId: parseInt(chatId), // Use only ChatId and Content
            content: content,
        };

        console.log("Payload being sent to the server:", data);
        // Send a POST request using the data 
        fetch('/Messages/Send', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // SignalR connection
                'ConnectionId': connection.connectionId, 
            },
            // Convert data being sent to JSON 
            body: JSON.stringify(data),
        })
            // Handle backend response errors 
            .then(response => {
                if (!response.ok) {
                    return response.text().then(errorMessage => {
                        throw new Error(errorMessage);
                    });
                }
                // Convert Response to json 
                return response.json();
            })
            .then(() => {
                console.log("Message sent successfully.");
                // Clear message input field for another message 
                document.getElementById('chatInput').value = ''; 
            })
            // Handle all other errors 
            .catch(error => {
                console.error("Error sending message:", error);
                alert("Failed to send message. Please try again.");
            });
    }
    // Index for attending slides 
    let attendingIndex = 0;
    // Index for past slides 
    let pastIndex = 0;

    document.addEventListener("DOMContentLoaded", () => {
        initializeSlides("attending-events-section");
        initializeSlides("past-events-section");
    });
    /*
initializeSlides(sectionId)

NAME

    initializeSlides - Initializes the slideshow display

SYNOPSIS

    void initializeSlides(string sectionId);
        sectionId --> Which section to populate 

DESCRIPTION

    This function sets up the initial state for the slideshow sections. It retrieves all
    elements with the class "event-item" inside the specified section, hides all of
    them, and displays the first slide. 

RETURNS

    None.

AUTHOR

    Kevin Chicas

DATE

   12/10/2024 10:47 PM
*/
    function initializeSlides(sectionId) {
        // Get the section 
        const section = document.getElementById(sectionId);
        // Get all event items 
        const slides = section.getElementsByClassName("event-item");
        // Handle case where there are no slides 
        if (slides.length === 0) return;
        // Iterate through all slides and set display to none to hide them 
        for (let i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        // Display the first slide 
        slides[0].style.display = "block";
    }
        /**/
/*
prevSlideAttending()

NAME

        prevSlideAttending - Move to the previous slide 

SYNOPSIS

        void prevSlideAttending();

DESCRIPTION
        Decrements the attendingIndex global variable which is used to track 
        the current slide for the attending section. Will decrement to show the previous slide. Calls the changeSlide
        function with the updated index and attending events section.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 10:49 PM
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/
/**/

    function prevSlideAttending() {
        // Decrement slide index 
        attendingIndex--;
        // Call slide moving function with updated index
        changeSlide(attendingIndex, "attending-events-section");
    }
        /**/
/*
nextSlideAttending()

NAME

        nextSlideAttending - Move to the following slide 

SYNOPSIS

        void nextSlideAttending();

DESCRIPTION
        Increments the attendingIndex global variable which is used to track 
        the current slide for the attending section. Will increment to show the following slide. Calls the changeSlide
        function with the updated index and attending events section.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 10:49 PM
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/
/**/
    function nextSlideAttending() {
        // Increment slide index
        attendingIndex++;
        // Call slide moving function with updated index
        changeSlide(attendingIndex, "attending-events-section");
    }
    /*
prevSlidePast()

NAME

        prevSlidePast - Move to the previous slide 

SYNOPSIS

        void prevSlidePast();

DESCRIPTION
        Decrements the pastIndex global variable which is used to track 
        the current slide for the past attended section. Will decrement to show the previous slide. Calls the changeSlide
        function with the updated index and past events section.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 10:50 PM
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/
/**/
    function prevSlidePast() {
        // Decrement slide index
        pastIndex--;
        // Call slide moving function with updated index
        changeSlide(pastIndex, "past-events-section");
    }
        /*
nextSlidePast()

NAME

        nextSlidePast - Move to the following slide 

SYNOPSIS

        void nextSlidePast();

DESCRIPTION
        Increments the pastIndex global variable which is used to track 
        the current slide for the past attended section. Will increment to show the following slide. Calls the changeSlide
        function with the updated index and past events section.

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 10:50 PM
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/
/**/

    function nextSlidePast() {
        // Increment slide index
        pastIndex++;
        // Call slide moving function with updated index
        changeSlide(pastIndex, "past-events-section");
    }

    
    /*
changeSlide(index, sectionId)

NAME

        changeSlide - Change the currently displayed slide 

SYNOPSIS

        void changeSlide(int index, string sectionId);
            index       --> The index of slide to show 
            sectionId --> Section where the slide should be changed in 

DESCRIPTION
        This function updates the current slide to display the previous or following slide. 
        If the requested index exceeds the the number of available slides, it loops back to the first slide. 
        If the index is less than 0, it wraps around to the last slide. All slides are hidden ensuring only the desired
        slide is shown. 

RETURNS

        None.

AUTHOR

        Kevin Chicas

DATE

        12/08/2024 10:51 PM 
REFERENCE
    https://www.w3schools.com/howto/howto_js_slideshow.asp
*/

    function changeSlide(index, sectionId) {
        // Get the section to change the slide in  
        const section = document.getElementById(sectionId);
        // Get all the slides within the section
        const slides = section.getElementsByClassName("event-item");
        // Exit function if there are no slides
        if (slides.length === 0) return;
        // If index goes beyond slide count, loop back to the first slide
        if (index >= slides.length) index = 0;
        // Handle case where index is less than 0 to go  to the last slide 
        if (index < 0) index = slides.length - 1;
            // Do not show all slides
        for (let i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
            // Display the desired slide
        slides[index].style.display = "block";
    }



</script>


