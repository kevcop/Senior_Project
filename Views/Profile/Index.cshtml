@model Senior_Project.Models.Profile

@{
    ViewData["Title"] = "Profile";
}

<head>
    <link href="~/css/styles.css" rel="stylesheet" type="text/css" />
</head>

<div class="profile-container">
    <h1 class="text-center">Your Profile</h1>

    <!-- User Bio -->
    <section class="profile-section">
        <h2>Bio</h2>
        <textarea asp-for="Bio" rows="4" placeholder="Tell us about yourself..." class="profile-bio"></textarea>
    </section>

    <!-- User Interests -->
    <section class="profile-section">
        <h2>Interests</h2>
        <textarea asp-for="Interests" rows="4" placeholder="What are your interests?" class="profile-interests"></textarea>
    </section>

    <!-- Attending Events -->
    <section class="profile-section">
        <h2>Attending Events</h2>
        <button class="btn btn-primary" onclick="openEventSearchModal('attending')">Search and Add Events</button>
        <button class="btn btn-danger" onclick="clearAttendingEvents()">Clear Attending Events</button>
        <div class="carousel-container">
            <a class="prev" onclick="prevSlideAttending()">&#10094;</a>
            <div class="event-slides" id="attending-events-container">
                @if (ViewBag.AttendingEventImages != null && ViewBag.AttendingEventImages.Count > 0)
                {
                    foreach (var image in ViewBag.AttendingEventImages)
                    {
                        <div class="event-item">
                            <img src="@image.FilePath" alt="Event Image" class="event-image" />
                        </div>
                    }
                }
                else
                {
                    <p>You are not attending any events yet.</p>
                }
            </div>
            <a class="next" onclick="nextSlideAttending()">&#10095;</a>
        </div>
    </section>

    <!-- Past Events -->
    <section class="profile-section">
        <h2>Past Events</h2>
        <button class="btn btn-primary" onclick="openEventSearchModal('past')">Search and Add Events</button>
        <button class="btn btn-danger" onclick="clearPastEvents()">Clear Past Events</button>
        <div class="carousel-container">
            <a class="prev" onclick="prevSlidePast()">&#10094;</a>
            <div class="event-slides" id="past-events-container">
                @if (ViewBag.PastEventImages != null && ViewBag.PastEventImages.Count > 0)
                {
                    foreach (var image in ViewBag.PastEventImages)
                    {
                        <div class="event-item">
                            <img src="@image.FilePath" alt="Past Event Image" class="event-image" />
                        </div>
                    }
                }
                else
                {
                    <p>No past events found.</p>
                }
            </div>
            <a class="next" onclick="nextSlidePast()">&#10095;</a>
        </div>
    </section>
</div>

<!-- Modal Popup -->
<div id="eventSearchModal" class="modal" style="display:none;">
    <div class="modal-content">
        <span class="close" onclick="closeEventSearchModal()">&times;</span>
        <h3>Search for Events</h3>
        <input type="text" id="searchInput" placeholder="Search by event or artist name" oninput="searchEvents()" />
        <div id="search-results"></div>
        <h4>Selected Events</h4>
        <ul id="selected-events-list">
            <!-- User selections will be added here -->
        </ul>
        <button class="btn btn-primary" onclick="saveSelectionsToProfile()">Save Selected Events</button>
    </div>
</div>

<script>
    let attendingIndex = 0;
    let pastIndex = 0;
    let selectedEvents = { attending: [], past: [] };

    // Initialize carousels on page load
    document.addEventListener("DOMContentLoaded", () => {
        initializeSlides("attending-events-container");
        initializeSlides("past-events-container");
    });

    function initializeSlides(containerId) {
        const container = document.getElementById(containerId);
        const slides = container.getElementsByClassName("event-item");
        if (slides.length === 0) return;

        for (let i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        slides[0].style.display = "block";
    }

    // Carousel functions
    function prevSlideAttending() {
        attendingIndex--;
        changeSlide(attendingIndex, "attending-events-container");
    }

    function nextSlideAttending() {
        attendingIndex++;
        changeSlide(attendingIndex, "attending-events-container");
    }

    function prevSlidePast() {
        pastIndex--;
        changeSlide(pastIndex, "past-events-container");
    }

    function nextSlidePast() {
        pastIndex++;
        changeSlide(pastIndex, "past-events-container");
    }

    function changeSlide(index, containerId) {
        const container = document.getElementById(containerId);
        const slides = container.getElementsByClassName("event-item");
        if (slides.length === 0) return;

        if (index >= slides.length) index = 0;
        if (index < 0) index = slides.length - 1;

        for (let i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        slides[index].style.display = "block";
    }

    // Clear attending events
    async function clearAttendingEvents() {
        try {
            const response = await fetch('/Profile/ClearSelections', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ type: 'attending' }),
            });

            if (response.ok) {
                alert("Attending events cleared!");
                location.reload();
            } else {
                alert("Failed to clear attending events.");
            }
        } catch (error) {
            console.error("Error clearing attending events:", error);
        }
    }

    // Clear past events
    async function clearPastEvents() {
        try {
            const response = await fetch('/Profile/ClearSelections', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ type: 'past' }),
            });

            if (response.ok) {
                alert("Past events cleared!");
                location.reload();
            } else {
                alert("Failed to clear past events.");
            }
        } catch (error) {
            console.error("Error clearing past events:", error);
        }
    }

    // Event search modal and saving logic
    function openEventSearchModal(type) {
        currentSelectionType = type;
        document.getElementById("eventSearchModal").style.display = "block";
    }

    function closeEventSearchModal() {
        document.getElementById("eventSearchModal").style.display = "none";
        document.getElementById("searchInput").value = "";
        document.getElementById("search-results").innerHTML = "";
    }

    async function searchEvents() {
        const query = document.getElementById("searchInput").value;
        if (query.trim() === "") {
            document.getElementById("search-results").innerHTML = "";
            return;
        }

        try {
            const response = await fetch(`/Event/Search?query=${query}`);
            const results = await response.json();
            const resultsDiv = document.getElementById("search-results");
            resultsDiv.innerHTML = "";

            results.forEach(event => {
                const div = document.createElement("div");
                div.innerHTML = `
                        <p>${event.eventName || "Unnamed Event"}</p>
                        <button onclick="addEventToSelection(${event.eventID}, '${event.eventName || "Unnamed Event"}')">Add</button>
                    `;
                resultsDiv.appendChild(div);
            });
        } catch (error) {
            console.error("Error fetching search results:", error);
        }
    }

    function addEventToSelection(eventID, eventName) {
        if (!selectedEvents[currentSelectionType].some(event => event.id === eventID)) {
            selectedEvents[currentSelectionType].push({ id: eventID, name: eventName });
            updateSelectedEventsList();
        }
    }

    function updateSelectedEventsList() {
        const list = document.getElementById("selected-events-list");
        list.innerHTML = selectedEvents[currentSelectionType]
            .map(event => `<li>${event.name} <button onclick="removeEventFromSelection(${event.id})">Remove</button></li>`)
            .join("");
    }

    function removeEventFromSelection(eventID) {
        selectedEvents[currentSelectionType] = selectedEvents[currentSelectionType].filter(event => event.id !== eventID);
        updateSelectedEventsList();
    }

    async function saveSelectionsToProfile() {
        try {
            const payload = {};
            payload[currentSelectionType] = selectedEvents[currentSelectionType].map(event => event.id);

            const response = await fetch(`/Profile/UpdateSelections`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
            });

            if (response.ok) {
                alert("Events saved successfully!");
                closeEventSearchModal();
                location.reload();
            } else {
                const errorText = await response.text();
                console.error("Error saving events:", errorText);
                alert("Error saving events. Please try again.");
            }
        } catch (error) {
            console.error("Error saving events:", error);
            alert("An unexpected error occurred. Please try again.");
        }
    }
</script>
